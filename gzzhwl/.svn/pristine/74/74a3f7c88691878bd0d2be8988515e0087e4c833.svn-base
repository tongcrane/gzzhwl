package com.gzzhwl.admin.driver.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.gzzhwl.admin.driver.service.DriverManagerService;
import com.gzzhwl.admin.driver.vo.DriverInfoQueryVo;
import com.gzzhwl.admin.driver.vo.DriverInfoVo;
import com.gzzhwl.core.data.model.DriverBankInfo;
import com.gzzhwl.core.data.model.RealDriverInfo;
import com.gzzhwl.core.page.Page;
import com.gzzhwl.rest.security.utils.SecurityUtils;
import com.gzzhwl.rest.springmvc.annotation.Pagination;
import com.gzzhwl.rest.springmvc.model.PageParameter;
import com.gzzhwl.rest.springmvc.model.ResponseModel;

/**
 * 驾驶员controller
 *
 */
@RestController
@RequestMapping("/admin/driver")
public class DriverManagerController {

	@Autowired
	DriverManagerService service;
	@Autowired
	Mapper beanMapper;

	/**
	 * 驾驶员基础信息录入
	 * 
	 * @param params
	 * @param accountInfo
	 * @return
	 * @throws InstantiationException
	 * @throws IllegalAccessException
	 * @throws IllegalArgumentException
	 */
	@RequestMapping(value = "/saveDriver", method = RequestMethod.POST)
	public ResponseModel saveDriver(DriverInfoVo infoVo) {
		String staffId = SecurityUtils.getSubject().getStaffId();
		Integer departId = SecurityUtils.getSubject().getDepartId();
		RealDriverInfo driverInfo = beanMapper.map(infoVo, RealDriverInfo.class);
		DriverBankInfo bankInfo = beanMapper.map(infoVo, DriverBankInfo.class);

		String driverInfoId = service.save(driverInfo, bankInfo, staffId, departId);

		Map<String, Object> map = new HashMap<>();
		map.put("driverInfoId", driverInfoId);

		return new ResponseModel(map);
	}

	/**
	 * 分页查询
	 * 
	 * @param accountInfo
	 * @param driverInfoId
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/page", method = RequestMethod.POST)
	public ResponseModel page(DriverInfoQueryVo queryVo, @Pagination PageParameter page,
			@RequestParam String queryType) {

		Page<Map<String, Object>> data = service.page(queryVo, page.getPageIndex(), page.getPageSize(), queryType);

		return new ResponseModel(data);
	}

	/**
	 * 详细信息查询
	 * 
	 * @param driverInfoId
	 * @param accountInfo
	 * @return
	 */
	@RequestMapping(value = "/queryDriverDetail", method = RequestMethod.GET)
	public ResponseModel queryDetail(@RequestParam String driverInfoId) {
		//RealDriverInfo driverInfo = service.get(driverInfoId);
		Map<String,Object> driverInfo=service.getDriverDetail(driverInfoId);
		return new ResponseModel(driverInfo);
	}

	/**
	 * 详细信息查询
	 * 
	 * @param driverInfoId
	 * @param accountInfo
	 * @return
	 */
	@RequestMapping(value = "/queryDriverBankDetail", method = RequestMethod.GET)
	public ResponseModel queryDriverBankDetail(@RequestParam String driverInfoId) {
		DriverBankInfo bankInfo = service.queryDriverBankDetail(driverInfoId);
		return new ResponseModel(bankInfo);
	}

	/**
	 * 基础信息修改
	 * 
	 * @param driverInfo
	 * @param driverInfoId
	 * @param accountInfo
	 * @return
	 */
	@RequestMapping(value = "/updateDriver", method = RequestMethod.POST)
	public ResponseModel update(DriverInfoVo driverInfoVo) {
		String staffId = SecurityUtils.getSubject().getStaffId();
		RealDriverInfo driverInfo = beanMapper.map(driverInfoVo, RealDriverInfo.class);
		DriverBankInfo bankInfo = beanMapper.map(driverInfoVo, DriverBankInfo.class);
		service.update(driverInfo, bankInfo, staffId);
		return new ResponseModel(null);
	}

	/**
	 * 司机信息删除
	 * 
	 * @param driverInfo
	 * @param driverInfoId
	 * @param accountInfo
	 * @return
	 */
	@RequestMapping(value = "/removeDriver", method = RequestMethod.POST)
	public ResponseModel removeDriver(@RequestParam String driverInfoId) {
		String staffId = SecurityUtils.getSubject().getStaffId();
		service.remove(driverInfoId, staffId);
		return new ResponseModel(null);
	}

	/**
	 * 图片上传或修改
	 * 
	 * @param file
	 * @param driverInfoId
	 * @param accountInfo
	 * @param imageType
	 * @return
	 */
	@RequestMapping(value = "/imageUpload", method = RequestMethod.POST)
	public ResponseModel imageUpload(@RequestParam MultipartFile image) {
		String staffId = SecurityUtils.getSubject().getStaffId();
		String imageId = service.updateImageInfo(image, staffId);
		Map<String, String> result = new HashMap<String, String>();
		result.put("imageId", imageId);
		return new ResponseModel(result);
	}

	/**
	 * 司机查询列表导出
	 * 
	 * @param queryVo
	 * @param queryType
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/exportDriverList", method = RequestMethod.POST)
	public ResponseModel exportDriverList(DriverInfoQueryVo queryVo, @RequestParam String queryType) throws Exception {

		return new ResponseModel(service.exportDriverList(queryVo, queryType));
	}

	/**
	 * 司机身份证或者从业资格证唯一性校验
	 * 
	 * @param idno
	 * @param qcNo
	 * @param driverInfoId
	 * @return
	 */
	@RequestMapping(value = "/driverUniqueValidate", method = RequestMethod.POST)
	public ResponseModel exportDriverList(@RequestParam(required = false) String idno,
			@RequestParam(required = false) String qcNo, @RequestParam(required = false) String driverInfoId) {
		Map<String, Object> result = service.driverUniqueValidate(idno, qcNo, driverInfoId);
		return new ResponseModel(result);
	}

	/**
	 * 获取司机列表
	 * 
	 * @param keyWord
	 * @return
	 */
	@RequestMapping(value = "/getDrivers", method = RequestMethod.GET)
	public ResponseModel getDrivers(@RequestParam(required = false) String name,
			@RequestParam(required = false) String driverIds) {
		String[] arr_driverIds = StringUtils.split(driverIds, ",");
		List<Map<String, Object>> drivers = service.getDrivers(name, arr_driverIds);
		return new ResponseModel(drivers);
	}
}
