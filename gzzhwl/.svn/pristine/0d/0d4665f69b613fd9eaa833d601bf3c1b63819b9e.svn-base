package com.gzzhwl.tms.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.gzzhwl.admin.order.service.ChargeService;
import com.gzzhwl.admin.order.service.OrderHistoryService;
import com.gzzhwl.common.model.FlowActionCategory;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.constant.SeqNoKey;
import com.gzzhwl.core.data.dao.OrderBaseInfoDao;
import com.gzzhwl.core.data.dao.OrderDetailInfoDao;
import com.gzzhwl.core.data.dao.OrderLineInfoDao;
import com.gzzhwl.core.data.dao.OrderReceiverInfoDao;
import com.gzzhwl.core.data.dao.OrderSenderInfoDao;
import com.gzzhwl.core.data.model.ChargeInfo;
import com.gzzhwl.core.data.model.FlowDef;
import com.gzzhwl.core.data.model.OrderBaseInfo;
import com.gzzhwl.core.data.model.OrderDetailInfo;
import com.gzzhwl.core.data.model.OrderLineInfo;
import com.gzzhwl.core.data.model.OrderReceiverInfo;
import com.gzzhwl.core.data.model.OrderSenderInfo;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.core.utils.JodaDateUtils;
import com.gzzhwl.rest.exception.RestException;
import com.gzzhwl.tms.service.TMSOrderService;
import com.gzzhwl.tms.vo.OrderBaseInfoVO;
import com.gzzhwl.tms.vo.OrderLineInfoVO;
import com.gzzhwl.tms.vo.OrderReceiverInfoVO;
import com.gzzhwl.tms.vo.OrderSenderInfoVO;
import com.gzzhwl.tms.vo.OrderVO;
import com.gzzhwl.tms.vo.PushOrderVO;

@Service
public class TMSOrderServiceImpl implements TMSOrderService {
	@Autowired
	private ChargeService chargeService;
	@Value("${tmsadmin.staffid}")
	private String tmsAdminId;
	@Autowired
	private FlowsService flowService;
	@Autowired
	private OrderHistoryService orderHistoryService;

	@Autowired
	private OrderDetailInfoDao detailInfoDao;
	@Autowired
	private OrderBaseInfoDao baseInfoDao;
	@Autowired
	private OrderLineInfoDao lineInfoDao;
	@Autowired
	private OrderReceiverInfoDao receiverInfoDao;
	@Autowired
	private OrderSenderInfoDao senderInfoDao;

	@Override
	public String pushOrder(OrderVO orderInfo) throws RestException {
		OrderBaseInfoVO baseInfoVO = orderInfo.getBaseInfo();
		OrderReceiverInfoVO receiverVO = orderInfo.getReceiver();
		OrderSenderInfoVO senderVO = orderInfo.getSender();
		OrderLineInfoVO lineInfoVO = orderInfo.getLineInfo();
		PushOrderVO sourceInfo = orderInfo.getSourceInfo();
		baseInfoVO.valid();
		receiverVO.valid();
		senderVO.valid();
		lineInfoVO.valid();
		sourceInfo.valid();
		OrderBaseInfo baseInfo = this.getOrderBaseInfo(baseInfoVO);
		OrderReceiverInfo receiver = this.getReceiverInfo(receiverVO);
		OrderSenderInfo sender = this.getSenderInfo(senderVO);
		OrderLineInfo lineInfo = this.getLineInfo(lineInfoVO);
		OrderDetailInfo orderDetailInfo = this.getOrderDetailInfo(baseInfoVO);

		String orderId = this.saveOrder(baseInfo, orderDetailInfo, receiver, sender, lineInfo);
		return orderId;
	}

	private String saveOrder(OrderBaseInfo baseInfo, OrderDetailInfo orderDetailInfo, OrderReceiverInfo receiver,
			OrderSenderInfo sender, OrderLineInfo lineInfo) {
		String infoId = IdentifierUtils.getId().generate().toString();
		String orderNo = IdentifierUtils.getSequence(SeqNoKey.ORDER).generate().toString();
		
		//TODO:customer

		baseInfo.setInfoId(infoId);
		orderDetailInfo.setOrderNo(orderNo);

		orderDetailInfo.setInfoId(infoId);
		receiver.setInfoId(infoId);
		sender.setInfoId(infoId);
		lineInfo.setInfoId(infoId);

		FlowDef flowDef = flowService.startFlow(ZHFlow.ORDER, FlowActionCategory.CBS);
		orderDetailInfo.setStatus(flowDef.getTransitionStatus());
		baseInfoDao.insert(baseInfo);
		detailInfoDao.insert(orderDetailInfo);
		senderInfoDao.insert(sender);
		lineInfoDao.insert(lineInfo);
		receiverInfoDao.insert(receiver);
		String orderId = orderDetailInfo.getOrderId();
		orderHistoryService.saveOrderHistory(orderId, flowDef.getLinkedStatus(), flowDef, tmsAdminId);
		return null;
	}

	private OrderDetailInfo getOrderDetailInfo(OrderBaseInfoVO baseInfoVO) {
		OrderDetailInfo orderDetailInfo = new OrderDetailInfo();
		orderDetailInfo.setGoodsVolume(baseInfoVO.getGoodsVolume());
		orderDetailInfo.setGoodsWeight(baseInfoVO.getGoodsWeight());
		orderDetailInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());
		orderDetailInfo.setOrderId(baseInfoVO.getOrderId());
		orderDetailInfo.setCreatedBy(tmsAdminId);
		orderDetailInfo.setUpdatedBy(tmsAdminId);
		return orderDetailInfo;
	}

	private OrderLineInfo getLineInfo(OrderLineInfoVO lineInfoVO) {
		OrderLineInfo lineInfo = new OrderLineInfo();
		// lineInfo.setEndCodeC(endCodeC);
		// lineInfo.setEndCodeP(endCodeP);
		// lineInfo.setStartCodeP(startCodeP);
		// lineInfo.setStartCodeC(startCodeC);
		return lineInfo;
	}

	private OrderSenderInfo getSenderInfo(OrderSenderInfoVO senderVO) {
		OrderSenderInfo senderInfo = new OrderSenderInfo();
		senderInfo.setAddress(senderVO.getAddress());
		// senderInfo.setAreaCode(areaCode);
		// TODO:areaCode
		senderInfo.setContactName(senderVO.getContactName());
		senderInfo.setCustomerId(senderVO.getCustomerId());
		senderInfo.setCustomerName(senderVO.getCustomerName());
		senderInfo.setMobile(senderVO.getMobile());
		senderInfo.setTelphone(senderVO.getTelphone());
		return senderInfo;
	}

	private OrderReceiverInfo getReceiverInfo(OrderReceiverInfoVO receiverVO) {
		OrderReceiverInfo receiverInfo = new OrderReceiverInfo();
		receiverInfo.setAddress(receiverVO.getAddress());
		// receiverInfo.setAreaCode(areaCode);
		// TODO:areaCode
		receiverInfo.setContactName(receiverVO.getContactName());
		receiverInfo.setCustomerName(receiverVO.getCustomerName());
		receiverInfo.setMobile(receiverVO.getMobile());
		receiverInfo.setTelphone(receiverVO.getTelphone());
		return receiverInfo;
	}

	private OrderBaseInfo getOrderBaseInfo(OrderBaseInfoVO baseInfoVO) {
		OrderBaseInfo baseInfo = new OrderBaseInfo();
		baseInfo.setAddrId(null);
		baseInfo.setAgreementId(null);
		baseInfo.setBelongDepartId(null);
		String chargeId = this.getChargeId(baseInfoVO.getChargeType());
		baseInfo.setChargeId(chargeId);
		baseInfo.setCreatedBy(tmsAdminId);
		baseInfo.setCustomerBillNo(baseInfoVO.getCustomerBillNo());
		baseInfo.setGoodsName(baseInfoVO.getGoodsName());
		baseInfo.setGoodsVolume(baseInfoVO.getGoodsVolume());
		baseInfo.setGoodsWeight(baseInfoVO.getGoodsWeight());
		baseInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());
		baseInfo.setIsPredict(StringUtils.equals(baseInfoVO.getIsPredict(), "0") ? "否" : "是");
		baseInfo.setLineAttribute(baseInfoVO.getLineAttribute());
		baseInfo.setMiles(baseInfoVO.getMiles());
		baseInfo.setNeedArriveTime(JodaDateUtils.parse(baseInfoVO.getNeedArriveTime(), "yyyy-MM-dd HH:mm")
				.toString("yyyy-MM-dd HH:mm:ss"));
		baseInfo.setNeedImportedVehicles(StringUtils.equals(baseInfo.getNeedImportedVehicles(), "0") ? "否" : "是");
		baseInfo.setNeedLength(baseInfoVO.getNeedLength());
		baseInfo.setNeedOwnVehicles(StringUtils.equals(baseInfoVO.getNeedOwnVehicles(), "0") ? "否" : "是");
		baseInfo.setNeedStartTime(
				JodaDateUtils.parse(baseInfoVO.getNeedStartTime(), "yyyy-MM-dd HH:mm").toString("yyyy-MM-dd HH:mm:ss"));
		baseInfo.setNeedType(baseInfoVO.getNeedType());
		baseInfo.setOrderAdvice(baseInfoVO.getOrderAdvice());
		baseInfo.setOrderType(baseInfoVO.getOrderType());
		baseInfo.setPaymentType(baseInfoVO.getPaymentType());
		baseInfo.setPickUpTime(
				JodaDateUtils.parse(baseInfoVO.getPickUpTime(), "yyyy-MM-dd HH:mm").toString("yyyy-MM-dd HH:mm:ss"));
		baseInfo.setRemark(baseInfoVO.getRemark());
		baseInfo.setType(OrderBaseInfo.ORDER_BILL);
		baseInfo.setUnitPrice(baseInfoVO.getUnitPrice());
		baseInfo.setUpdatedBy(tmsAdminId);
		return baseInfo;
	}

	// 01整车 02公里数 03重量 04体积
	private String getChargeId(String chargeType) {
		ChargeInfo chargeInfo = chargeService.getByName(chargeType);
		return chargeInfo.getChargeId();
	}

}
