package com.gzzhwl.api.load.service.impl;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.gzzhwl.admin.load.service.LoadBillService;
import com.gzzhwl.admin.load.service.LoadHistoryService;
import com.gzzhwl.api.agent.service.AgentInfoService;
import com.gzzhwl.api.load.service.TripService;
import com.gzzhwl.common.model.FlowActionCategory;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.constant.ErrorCode;
import com.gzzhwl.core.constant.LoadBillType;
import com.gzzhwl.core.data.extdao.OrderInfoExtDao;
import com.gzzhwl.core.data.extdao.RealDriverInfoExtDao;
import com.gzzhwl.core.data.model.FlowDef;
import com.gzzhwl.core.data.model.FlowStatus;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.data.model.RealDriverInfo;
import com.gzzhwl.core.data.model.RegionInfo;
import com.gzzhwl.core.utils.JacksonJsonMapper;
import com.gzzhwl.core.utils.ValidateUtils;
import com.gzzhwl.rest.exception.RestException;

@Service
public class TripServiceImpl implements TripService {

	private final static Logger LOG = LoggerFactory.getLogger(TripServiceImpl.class);

	@Autowired
	private OrderInfoExtDao orderInfoExtDao;

	@Autowired
	private RealDriverInfoExtDao realDriverInfoExtDao;

	@Autowired
	private FlowsService flowsService;

	@Autowired
	private RegionService regionService;

	@Autowired
	private AgentInfoService agentInfoService;

	@Autowired
	private LoadHistoryService loadHistoryService;

	@Autowired
	private LoadBillService loadBillService;

	@Override
	public List<Map<String, Object>> getDriverOrderList(String accountId) {

		Map<String, Object> agentMap = agentInfoService.getAgentInfoByCondition(accountId);

		if (agentMap == null) {
			throw new RestException(ErrorCode.ERROR_900013.getCode(), "经纪人 - " + ErrorCode.ERROR_900013.getDesc());
		}

		String idno = (String) agentMap.get("idno");

		List<Map<String, Object>> listMap = orderInfoExtDao.getDriverOrderList(idno);

		// 更新状态描述
		CollectionUtils.transform(listMap, new Transformer<Map<String, Object>, Map<String, Object>>() {
			@Override
			public Map<String, Object> transform(Map<String, Object> input) {
				String status = (String) input.get("status");
				if (StringUtils.isNotBlank(status)) {
					FlowStatus statusCn = flowsService.getStatus(ZHFlow.LOAD_BILL, status);
					input.put("statusCn", statusCn.getName());
				} else {
					input.put("statusCn", StringUtils.EMPTY);
				}

				String startCodeP = (String) input.get("startCodeP");
				input.put("startCodePCn", this.getCodeCn(startCodeP));

				String endCodeP = (String) input.get("endCodeP");
				input.put("endCodePCn", this.getCodeCn(endCodeP));

				String startCodeC = (String) input.get("startCodeC");
				input.put("startCodeCCn", this.getCodeCn(startCodeC));

				String endCodeC = (String) input.get("endCodeC");
				input.put("endCodeCCn", this.getCodeCn(endCodeC));

				String transferCodeP = (String) input.get("transferCodeP");
				input.put("transferCodePCn", this.getCodeCn(transferCodeP));

				String transferCodeC = (String) input.get("transferCodeC");
				input.put("transferCodeCCn", this.getCodeCn(transferCodeC));

				String storeCityCode = (String) input.get("storeCityCode");
				input.put("storeCityCodeCn", this.getCodeCn(storeCityCode));

				String storeProvinceCode = (String) input.get("storeProvinceCode");
				input.put("storeProvinceCodeCn", this.getCodeCn(storeProvinceCode));

				String storeDistrictCode = (String) input.get("storeDistrictCode");
				input.put("storeDistrictCodeCn", this.getCodeCn(storeDistrictCode));

				String senderAreaCode = (String) input.get("sendArea");
				if (StringUtils.isNotBlank(senderAreaCode)) {
					List<RegionInfo> regionList = regionService.findRootByCode(senderAreaCode);
					input.put("senderAreaList", regionList);
				} else {
					input.put("senderAreaList", Lists.newArrayList());
				}

				String receiveAreaCode = (String) input.get("receiveArea");
				if (StringUtils.isNotBlank(receiveAreaCode)) {
					List<RegionInfo> regionList = regionService.findRootByCode(receiveAreaCode);
					input.put("receiveAreaList", regionList);
				} else {
					input.put("receiveAreaList", Lists.newArrayList());
				}

				return input;
			}

			private String getCodeCn(String code) {
				if (StringUtils.isNotBlank(code)) {
					RegionInfo startCodePCn = regionService.findByCode(code);
					if (startCodePCn != null) {
						return startCodePCn.getRegionName();
					}
				}
				return "";
			}
		});

		return listMap;
	}

	@Override
	public OutputStream getDriverOrderListStream(String accountId, String timeStamp, OutputStream outputStream) {

		BufferedOutputStream outputStm = new BufferedOutputStream(outputStream);

		List<Map<String, Object>> listMap = getDriverOrderList(accountId);

		try {
			if (!ValidateUtils.isEmpty(listMap)) {
				outputStm.write(JacksonJsonMapper.objectToJson(listMap).getBytes());
				outputStm.flush();
			}

		} catch (IOException e) {
			LOG.error("文件流写入失败,异常原因" + e.getMessage());
		} finally {
			if (outputStm != null) {
				try {
					outputStm.close();
				} catch (IOException e) {
					LOG.error("文件流写入失败,异常原因" + e.getMessage());
				}
			}
		}

		return outputStream;
	}

	@Override
	public List<Map<String, Object>> getDriverOrderHistoryList(String accountId) {

		RealDriverInfo dirverInfo = realDriverInfoExtDao.getDriverInfoByAccountId(accountId);

		if (dirverInfo == null) {
			throw new RestException(ErrorCode.ERROR_900013.getCode(), ErrorCode.ERROR_900013.getDesc());
		}

		List<Map<String, Object>> listMap = orderInfoExtDao.getDriverOrderHistoryList(dirverInfo.getDriverInfoId());

		// 更新状态描述
		CollectionUtils.transform(listMap, new Transformer<Map<String, Object>, Map<String, Object>>() {
			@Override
			public Map<String, Object> transform(Map<String, Object> input) {
				String status = (String) input.get("status");
				if (StringUtils.isNotBlank(status)) {
					FlowStatus statusCn = flowsService.getStatus(ZHFlow.LOAD_BILL, status);
					input.put("statusCn", statusCn.getName());
				} else {
					input.put("statusCn", StringUtils.EMPTY);
				}

				String startCodeP = (String) input.get("startCodeP");
				input.put("startCodePCn", this.getCodeCn(startCodeP));

				String endCodeP = (String) input.get("endCodeP");
				input.put("endCodePCn", this.getCodeCn(endCodeP));

				String startCodeC = (String) input.get("startCodeC");
				input.put("startCodeCCn", this.getCodeCn(startCodeC));

				String endCodeC = (String) input.get("endCodeC");
				input.put("endCodeCCn", this.getCodeCn(endCodeC));

				String transferCodeP = (String) input.get("transferCodeP");
				input.put("transferCodePCn", this.getCodeCn(transferCodeP));

				String transferCodeC = (String) input.get("transferCodeC");
				input.put("transferCodeCCn", this.getCodeCn(transferCodeC));

				String storeCityCode = (String) input.get("storeCityCode");
				input.put("storeCityCodeCn", this.getCodeCn(storeCityCode));

				String storeProvinceCode = (String) input.get("storeProvinceCode");
				input.put("storeProvinceCodeCn", this.getCodeCn(storeProvinceCode));

				String storeDistrictCode = (String) input.get("storeDistrictCode");
				input.put("storeDistrictCodeCn", this.getCodeCn(storeDistrictCode));

				String senderAreaCode = (String) input.get("sendArea");
				if (StringUtils.isNotBlank(endCodeP)) {
					List<RegionInfo> regionList = regionService.findRootByCode(senderAreaCode);
					input.put("senderAreaList", regionList);
				} else {
					input.put("senderAreaList", Lists.newArrayList());
				}

				String receiveAreaCode = (String) input.get("receiveArea");
				if (StringUtils.isNotBlank(endCodeP)) {
					List<RegionInfo> regionList = regionService.findRootByCode(receiveAreaCode);
					input.put("receiveAreaList", regionList);
				} else {
					input.put("receiveAreaList", Lists.newArrayList());
				}

				return input;
			}

			private String getCodeCn(String code) {
				if (StringUtils.isNotBlank(code)) {
					RegionInfo startCodePCn = regionService.findByCode(code);
					if (startCodePCn != null) {
						return startCodePCn.getRegionName();
					}
				}
				return "";
			}
		});

		return listMap;
	}

	@Override
	public void ysjVehicleCheck(String loadNo, String accountId, String actionTime) {

		OrderLoadInfo orderLoadInfo = loadBillService.getLoadInfoByLoadNo(loadNo);

		if (orderLoadInfo == null) {
			throw new RestException(ErrorCode.ERROR_900013.getCode(), ErrorCode.ERROR_900013.getDesc());
		}

		// 跑出异常不处理,直接获取到该流程
		FlowDef flowdef = new FlowDef();
		flowdef.setActionCode("02");
		flowdef.setCategory(FlowActionCategory.YSJ.getCode());
		flowdef.setTransitionStatus(LoadBillType.VEHICLECHECK.getCode());
		flowdef.setMsgTemplate("司机完成了车检");

		loadHistoryService.saveErrorLoadHistory(orderLoadInfo.getLoadId(), orderLoadInfo.getStatus(), actionTime,
				flowdef, accountId);
	}

	@Override
	public void ysjCloseToSurface(String loadNo, String accountId, String actionTime) {

		OrderLoadInfo orderLoadInfo = loadBillService.getLoadInfoByLoadNo(loadNo);

		if (orderLoadInfo == null) {
			throw new RestException(ErrorCode.ERROR_900013.getCode(), ErrorCode.ERROR_900013.getDesc());
		}

		// 跑出异常不处理,直接获取到该流程
		FlowDef flowdef = new FlowDef();
		flowdef.setActionCode("03");
		flowdef.setCategory(FlowActionCategory.YSJ.getCode());
		flowdef.setTransitionStatus(LoadBillType.CLOSETOSURFACE.getCode());
		flowdef.setMsgTemplate("司机完成了靠台");

		loadHistoryService.saveErrorLoadHistory(orderLoadInfo.getLoadId(), orderLoadInfo.getStatus(), actionTime,
				flowdef, accountId);

	}

	@Override
	public void ysjTripTheCar(String loadNo, String accountId, String actionTime) {

		OrderLoadInfo orderLoadInfo = loadBillService.getLoadInfoByLoadNo(loadNo);

		if (orderLoadInfo == null) {
			throw new RestException(ErrorCode.ERROR_900013.getCode(), ErrorCode.ERROR_900013.getDesc());
		}

		// 跑出异常不处理,直接获取到该流程
		FlowDef flowdef = new FlowDef();
		flowdef.setActionCode("05");
		flowdef.setCategory(FlowActionCategory.YSJ.getCode());
		flowdef.setTransitionStatus(LoadBillType.DEPART.getCode());
		flowdef.setMsgTemplate("司机已发车");

		loadHistoryService.saveErrorLoadHistory(orderLoadInfo.getLoadId(), orderLoadInfo.getStatus(), actionTime,
				flowdef, accountId);

	}

}
