package com.gzzhwl.api.load.service.impl;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gzzhwl.api.load.service.TripMapService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.constant.DataSource;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.constant.LoadBillType;
import com.gzzhwl.core.data.dao.OrderLoadInfoDao;
import com.gzzhwl.core.data.extdao.LoadFeedbackLogExtDao;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.data.model.RegionInfo;
import com.gzzhwl.rest.exception.RestException;

@Service
public class TripMapServiceImpl implements TripMapService {
	@Autowired
	private LoadFeedbackLogExtDao loadFeedbackLogExtDao;
	@Autowired
	private OrderLoadInfoDao orderLoadInfoDao;
	@Autowired
	private RegionService regionService;

	@Override
	public Map<String, Object> findTrackInfo(String loadId) throws RestException {
		Map<String, Object> info = this.getSourceBaseInfo(loadId);
		if (info != null) {
			Map<String, Object> result = Maps.newHashMap();
			List<Map<String, Object>> trackData = this.getFeedBack(loadId);
			result.put("track", trackData);
			result.put("info", info);
			return result;
		} else {
			return Maps.newHashMap();
		}
	}

	private Map<String, Object> getSourceBaseInfo(String loadId) {
		Map<String, Object> params = Maps.newHashMap();
		params.put("loadId", loadId);
		params.put("type", OrderLoadInfo.LOAD_BILL);
		params.put("isDeleted", Global.ISDEL_NORMAL.toString());
		Map<String, Object> result = orderLoadInfoDao.findBaseInfo(params);
		if (result != null) {
			String startCodePCn = this.getCodeCn((String) result.get("startCodeP"));
			result.put("startCodePCn", startCodePCn);
			String endCodePCn = this.getCodeCn((String) result.get("endCodeP"));
			result.put("endCodePCn", endCodePCn);
			String startCodeCCn = this.getCodeCn((String) result.get("startCodeC"));
			result.put("startCodeCCn", startCodeCCn);
			String endCodeCCn = this.getCodeCn((String) result.get("endCodeC"));
			result.put("endCodeCCn", endCodeCCn);

			String senderAreaCode = (String) result.get("senderAreaCode");
			List<RegionInfo> senderArea = regionService.findRootByCode(senderAreaCode);
			result.put("senderArea", senderArea);
			String receiverAreaCode = (String) result.get("receiverAreaCode");
			List<RegionInfo> receiverArea = regionService.findRootByCode(receiverAreaCode);
			result.put("receiverArea", receiverArea);

		}
		return result;
	}

	public String getCodeCn(String code) {
		if (StringUtils.isNotBlank(code)) {
			RegionInfo startCodePCn = regionService.findByCode(code);
			if (startCodePCn != null) {
				return startCodePCn.getRegionName();
			}
		}
		return "";
	}

	@Override
	public List<Map<String, Object>> getFeedBack(String loadId) throws RestException {
		if (StringUtils.isNotBlank(loadId)) {
			Map<String, Object> params = Maps.newHashMap();
			params.put("loadId", loadId);
			params.put("status", LoadBillType.DEPART.getCode());// 支查询已发车后的反馈
			params.put("isDeleted", Global.ISDEL_NORMAL.toString());
			params.put("ysjSource", DataSource.VLORRY.getCode());
			params.put("cbsSource", DataSource.PLATFORM.getCode());
			return loadFeedbackLogExtDao.findFeedBackOnTrans(params);
		} else {
			return Lists.newArrayList();
		}
	}

}
