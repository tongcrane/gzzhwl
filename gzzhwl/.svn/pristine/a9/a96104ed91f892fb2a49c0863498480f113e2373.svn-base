package com.gzzhwl.api.vehicle.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.gzzhwl.api.image.model.ImageCategory;
import com.gzzhwl.api.image.model.ImageItem;
import com.gzzhwl.api.image.service.ImageServiceFactory;
import com.gzzhwl.api.vehicle.service.VehicleService;
import com.gzzhwl.api.vehicle.validator.VehicleValidator;
import com.gzzhwl.api.vehicle.vo.VehicleInfoVo;
import com.gzzhwl.core.constant.DataSource;
import com.gzzhwl.core.constant.ErrorCode;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.constant.SeqNoKey;
import com.gzzhwl.core.constant.VehicleType;
import com.gzzhwl.core.data.dao.RealVehicleInfoDao;
import com.gzzhwl.core.data.dao.RealVehiclePlusInfoDao;
import com.gzzhwl.core.data.dao.VehicleInfoDao;
import com.gzzhwl.core.data.dao.VehiclePlusInfoDao;
import com.gzzhwl.core.data.extdao.RealVehicleInfoExtDao;
import com.gzzhwl.core.data.extdao.VehicleInfoExtDao;
import com.gzzhwl.core.data.model.RealVehicleInfo;
import com.gzzhwl.core.data.model.RealVehiclePlusInfo;
import com.gzzhwl.core.data.model.VehicleInfo;
import com.gzzhwl.core.data.model.VehiclePlusInfo;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.core.utils.ValidateUtils;
import com.gzzhwl.rest.exception.RestException;

@Service
public class VehicleServiceImpl implements VehicleService {

	@Autowired
	private VehicleInfoDao vehicleDao;

	@Autowired
	private VehiclePlusInfoDao vehiclePlusInfoDao;

	@Autowired
	private RealVehicleInfoDao vehicleDao_real;

	@Autowired
	private RealVehiclePlusInfoDao vehiclePlusInfoDao_real;

	@Autowired
	private VehicleInfoExtDao vehicleInfoExtDao;

	@Autowired
	private RealVehicleInfoExtDao realVehicleInfoExtDao;

	@Autowired
	private ImageServiceFactory imageServiceFactory;

	@Autowired
	private Mapper beanMapper;

	@Override
	public String updateVehicleInfo(VehicleInfo vehicleInfo, VehiclePlusInfo vehicleInfoPlusInfo, String accountId,
			String status) {

		if (ValidateUtils.isEmpty(vehicleInfo.getVehicleInfoId())) {
			throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
		}

		VehicleInfo vehicleInfo_detail = vehicleDao.get(vehicleInfo.getVehicleInfoId());

		if (vehicleInfo_detail == null) {
			throw new RestException(ErrorCode.ERROR_800005.getCode(), ErrorCode.ERROR_800005.getDesc());
		}

		// TODO 车辆唯一性校验
		// boolean res = tmpVehicleExistValidator(vehicleInfo.getPlateNumber() ,
		// vehicleInfo.getAccountId(),vehicleInfo.getVehicleInfoId());

		// TODO 车辆状态校验
		// 是否允许修改
		boolean res = canEdit("", vehicleInfo.getPlateNumber(), accountId);

		if (!res) {
			throw new RestException(ErrorCode.ERROR_900012.getCode(), ErrorCode.ERROR_900012.getDesc());
		}

		vehicleInfo.setUpdatedBy(accountId);
		vehicleInfo.setStatus(status);
		vehicleDao.updateSelective(vehicleInfo);

		if (vehicleInfoPlusInfo != null) {

			if (ValidateUtils.isEmpty(vehicleInfoPlusInfo.getVehicleInfoId())) {
				throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
			}

			vehiclePlusInfoDao.updateSelective(vehicleInfoPlusInfo);
		}

		return vehicleInfo.getVehicleInfoId();
	}

	@Override
	public String updateTemp(VehicleInfo vehicleInfo, VehiclePlusInfo vehicleInfoPlusInfo, String accountId,
			String status) {

		if (ValidateUtils.isEmpty(vehicleInfo.getVehicleInfoId())) {
			throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
		}

		VehicleInfo vehicleInfo_detail = vehicleDao.get(vehicleInfo.getVehicleInfoId());

		if (vehicleInfo_detail == null) {
			throw new RestException(ErrorCode.ERROR_800005.getCode(), ErrorCode.ERROR_800005.getDesc());
		}

		// TODO 车辆状态校验

		vehicleInfo.setUpdatedBy(accountId);
		vehicleInfo.setStatus(status);
		vehicleDao.updateSelective(vehicleInfo);

		if (vehicleInfoPlusInfo != null) {

			if (ValidateUtils.isEmpty(vehicleInfoPlusInfo.getVehicleInfoId())) {
				throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
			}

			vehiclePlusInfoDao.updateSelective(vehicleInfoPlusInfo);
		}

		return vehicleInfo.getVehicleInfoId();
	}

	@Override
	public String saveTemp(VehicleInfo vehicleInfo, VehiclePlusInfo vehicleInfoPlusInfo, String accountId,
			String status) {
		String vehicleInfoId = IdentifierUtils.getId().generate().toString();
		// String seq =
		// IdentifierUtils.getSequence(SeqNoKey.VEHICLE).generate().toString();
		vehicleInfo.setStatus(status);
		vehicleInfo.setAccountId(accountId);
		vehicleInfo.setVehicleInfoId(vehicleInfoId);
		vehicleInfo.setVehicleType(VehicleType.CAR.getCode());// 车头类型
		vehicleInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());// 是否删除
		vehicleInfo.setSource(DataSource.VLORRY.getCode());// 来源
		vehicleInfo.setCreatedBy(accountId);// 创建人
		vehicleInfoPlusInfo.setVehicleInfoId(vehicleInfoId);
		vehicleDao.insert(vehicleInfo);
		vehiclePlusInfoDao.insert(vehicleInfoPlusInfo);

		return vehicleInfo.getVehicleInfoId();
	}

	@Override
	public String saveVehicleInfo(VehicleInfo vehicleInfo, VehiclePlusInfo vehicleInfoPlusInfo, String accountId,
			String status) {
		// 验证车辆信息合法性
		VehicleValidator.tmp_vehicle_validator(vehicleInfo, vehicleInfoPlusInfo);

		// 车辆唯一性校验
		// boolean res = tmpVehicleExistValidator(vehicleInfo.getPlateNumber() ,
		// vehicleInfo.getAccountId(),null);
		// 是否允许修改
		boolean res = canEdit(null, vehicleInfo.getPlateNumber(), accountId);

		if (!res) {
			throw new RestException(ErrorCode.ERROR_900012.getCode(), ErrorCode.ERROR_900012.getDesc());
		}

		String vehicleInfoId = IdentifierUtils.getId().generate().toString();
		// String seq =
		// IdentifierUtils.getSequence(SeqNoKey.VEHICLE).generate().toString();
		vehicleInfo.setStatus(status);
		vehicleInfo.setAccountId(accountId);
		vehicleInfo.setVehicleInfoId(vehicleInfoId);
		vehicleInfo.setVehicleType(VehicleType.CAR.getCode());// 车头类型
		vehicleInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());// 是否删除
		vehicleInfo.setSource(DataSource.VLORRY.getCode());// 来源
		vehicleInfo.setCreatedBy(accountId);// 创建人
		vehicleInfoPlusInfo.setVehicleInfoId(vehicleInfoId);
		vehicleDao.insert(vehicleInfo);
		vehiclePlusInfoDao.insert(vehicleInfoPlusInfo);

		return vehicleInfo.getVehicleInfoId();
	}

	// @Override
	// public Map<String, Object> queryDetail(String vehicleInfoId) {
	//
	// if(ValidateUtils.isEmpty(vehicleInfoId)){
	// throw new RestException(ErrorCode.ERROR_800001.getCode(),
	// ErrorCode.ERROR_800001.getDesc());
	// }
	//
	// VehicleInfo vehicleInfo = vehicleDao.get(vehicleInfoId);
	//
	// if(vehicleInfo == null){
	// throw new RestException(ErrorCode.ERROR_800005.getCode(),
	// ErrorCode.ERROR_800005.getDesc());
	// }
	//
	// VehiclePlusInfo vehiclePlusInfo = vehiclePlusInfoDao.get(vehicleInfoId);
	//
	// Map<String, Object> para = new HashMap<>();
	//
	// para.put("vehicleInfo", vehicleInfo);
	// para.put("vehiclePlusInfo", vehiclePlusInfo);
	// return para;
	// }
	//
	//
	//
	@Override
	public String updateImage(MultipartFile file, String accountId) {

		if (file == null) {
			throw new RestException(ErrorCode.ERROR_900001.getCode(), ErrorCode.ERROR_900001.getDesc());
		}

		ImageItem imageItem = imageServiceFactory.saveImage(ImageCategory.VEHICLE, file, accountId);

		return imageItem.getFileId();
	}
	//
	// @Override
	// public VehicleInfo getVehicleByDriverInfoId(String driverInfoId) {
	//
	// if(ValidateUtils.isEmpty(driverInfoId)){
	// throw new RestException(ErrorCode.ERROR_800002.getCode(),
	// ErrorCode.ERROR_800002.getDesc());
	// }
	//
	// Map<String,Object> para = new HashMap<>();
	//
	// para.put("driverInfoId", driverInfoId);
	// para.put("isDeleted", Global.ISDEL_NORMAL.toString());
	//
	// List<Map<String,Object>> vehicleInfoList = vehicleDao.find(para);
	//
	//
	// VehicleInfo vehicleInfo = null;
	//
	// Map<String,Object> resMap = null;
	//
	// if(vehicleInfoList.size()>0){
	//
	// resMap = vehicleInfoList.get(0);
	//
	// vehicleInfo = beanMapper.map(resMap, VehicleInfo.class);
	//
	// }
	//
	// return vehicleInfo;
	// }
	//
	// @Override
	// public VehiclePlusInfo getVehiclePlusInfoByDriverInfoId(String
	// driverInfoId) {
	//
	// if(ValidateUtils.isEmpty(driverInfoId)){
	// throw new RestException(ErrorCode.ERROR_800002.getCode(),
	// ErrorCode.ERROR_800002.getDesc());
	// }
	//
	// Map<String,Object> para = new HashMap<>();
	//
	// para.put("driverInfoId", driverInfoId);
	// para.put("isDeleted", Global.ISDEL_NORMAL.toString());
	//
	// List<Map<String,Object>> vehicleInfoList = vehicleDao.find(para);
	//
	// VehiclePlusInfo vehiclePlusInfo = null;
	//
	// Map<String,Object> resMap = null;
	//
	// if(vehicleInfoList.size()>0){
	//
	// resMap = vehicleInfoList.get(0);
	//
	// VehicleInfo vehicleInfo= beanMapper.map(resMap, VehicleInfo.class);
	//
	// vehiclePlusInfo = vehiclePlusInfoDao.get(vehicleInfo.getVehicleInfoId());
	//
	// }
	//
	// return vehiclePlusInfo;
	// }

	@Override
	public Map<String, Object> getTmpVehicleInfoByDriverInfoId(String driverInfoId, String accountId) {

		List<Map<String, Object>> listMap = vehicleInfoExtDao.getTmpVehicleInfoByTmpDriverInfoId(driverInfoId,
				accountId);

		if (ValidateUtils.isEmpty(listMap)) {
			return null;
		}

		if (listMap.size() > 1) {
			throw new RestException(ErrorCode.ERROR_900010.getCode(), ErrorCode.ERROR_900010.getDesc());
		}

		return listMap.get(0);
	}

	@Override
	public boolean realVehicleExistValidator(String plateNumber) {

		Map<String, Object> listMap = getYSJRealVehicleInfoByPlateNumber(plateNumber);

		if (ValidateUtils.isEmpty(listMap)) {
			return false;
		}

		if (listMap.size() > 1) {
			throw new RestException(ErrorCode.ERROR_800027.getCode(), ErrorCode.ERROR_800027.getDesc());
		}

		return listMap.size() > 0;
	}

	@Override
	public String saveOrUpdateRealVehicle(RealVehicleInfo vehicleInfo, RealVehiclePlusInfo vehicleInfoPlusInfo) {

		Map<String, Object> listMap = getYSJRealVehicleInfoByPlateNumber(vehicleInfo.getPlateNumber());

		// 数据已存在,执行更新. 数据不存在执行添加
		if (!ValidateUtils.isEmpty(listMap)) {

			vehicleInfo.setVehicleInfoId(listMap.get("vehicleInfoId").toString());
			vehicleInfoPlusInfo.setVehicleInfoId(listMap.get("vehicleInfoId").toString());
			return updateRealVehicle(vehicleInfo, vehicleInfoPlusInfo);
		} else {
			return saveRealVehicle(vehicleInfo, vehicleInfoPlusInfo);
		}

	}

	public String saveRealVehicle(RealVehicleInfo vehicleInfo, RealVehiclePlusInfo vehicleInfoPlusInfo) {

		String vehicleInfoId = IdentifierUtils.getId().generate().toString();
		String seq = IdentifierUtils.getSequence(SeqNoKey.VEHICLE).generate().toString();
		vehicleInfo.setVehicleInfoId(vehicleInfoId);

		vehicleInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());// 是否删除
		vehicleInfo.setStatus(Global.STATUS_NORMAL.toString());// 审核状态
		vehicleInfo.setSource(DataSource.VLORRY.getCode());// 来源
		vehicleInfo.setSeqNo(seq);

		vehicleInfoPlusInfo.setVehicleInfoId(vehicleInfoId);

		vehicleDao_real.insert(vehicleInfo);
		vehiclePlusInfoDao_real.insert(vehicleInfoPlusInfo);

		return vehicleInfo.getVehicleInfoId();
	}

	public String updateRealVehicle(RealVehicleInfo vehicleInfo, RealVehiclePlusInfo vehicleInfoPlusInfo) {

		if (ValidateUtils.isEmpty(vehicleInfo.getVehicleInfoId())) {
			throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
		}

		vehicleDao_real.update(vehicleInfo);

		if (vehicleInfoPlusInfo != null) {
			if (ValidateUtils.isEmpty(vehicleInfoPlusInfo.getVehicleInfoId())) {
				throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
			}
			vehiclePlusInfoDao_real.update(vehicleInfoPlusInfo);
		}

		return vehicleInfo.getVehicleInfoId();
	}

	@Override
	public Map<String, Object> getRealVehicleInfoByDriverInfoId(String driverInfoId, String accountId) {

		List<Map<String, Object>> listMap = realVehicleInfoExtDao.getRealVehicleInfoByDriverInfoId(driverInfoId,
				accountId);

		if (ValidateUtils.isEmpty(listMap)) {
			return null;
		}

		if (listMap.size() > 1) {
			throw new RestException(ErrorCode.ERROR_900010.getCode(), ErrorCode.ERROR_900010.getDesc());
		}

		return listMap.get(0);
	}

	@Override
	public Map<String, Object> getYSJRealVehicleInfoByPlateNumber(String plateNumber) {
		// 没有车牌号不做校验。
		if (ValidateUtils.isEmpty(plateNumber)) {
			return null;
		}

		Map<String, Object> paramObj = new HashMap<>();

		paramObj.put("plateNumber", plateNumber);
		paramObj.put("source", DataSource.VLORRY);
		paramObj.put("isDeleted", Global.ISDEL_NORMAL.toString());

		List<Map<String, Object>> listMap = vehicleDao_real.find(paramObj);

		if (ValidateUtils.isEmpty(listMap)) {
			return null;
		}

		if (listMap.size() > 1) {
			throw new RestException(ErrorCode.ERROR_900010.getCode(), ErrorCode.ERROR_900010.getDesc());
		}

		return listMap.get(0);
	}

	// @Override
	// public boolean tmpVehicleExistValidator(String plateNumber, String
	// accountId, String existVehicleInfoId) {
	//
	// if(ValidateUtils.isEmpty(existVehicleInfoId)){
	// return tmpVehicleExistValidator(plateNumber,accountId);
	// }
	//
	// Map<String,Object> paramObj = new HashMap<>();
	// paramObj.put("plateNumber", plateNumber);
	// paramObj.put("accountId", accountId);
	// paramObj.put("isDeleted", Global.ISDEL_NORMAL.toString());
	// paramObj.put("source", DataSource.VLORRY.getCode());
	// paramObj.put("existVehicleInfoId", existVehicleInfoId);
	//
	// List<Map<String,Object>> listMap = vehicleInfoExtDao.find(paramObj);
	//
	// if(listMap.size()>1){
	// return true;
	// }
	//
	// if(listMap.size()>0){
	// if(existVehicleInfoId.equals(listMap.get(0).get("vehicleInfoId"))){
	// return false;
	// }
	// }
	//
	// return listMap.size()>0;
	// }

	// @Override
	// public boolean tmpVehicleExistValidator(String plateNumber,String
	// accountId){
	// //没有车牌号不做校验。
	// if(ValidateUtils.isEmpty(plateNumber)){
	// return false;
	// }
	//
	// Map<String,Object> paramObj = new HashMap<>();
	//
	// paramObj.put("plateNumber", plateNumber);
	// paramObj.put("accountId", accountId);
	// paramObj.put("isDeleted", Global.ISDEL_NORMAL.toString());
	// paramObj.put("source", DataSource.VLORRY.getCode());
	//
	// List<Map<String,Object>> listMap = vehicleInfoExtDao.find(paramObj);
	//
	// if(ValidateUtils.isEmpty(listMap)){
	// return false;
	// }
	//
	// return listMap.size() > 0;
	// }

	@Override
	public List<Map<String, Object>> getAuditDriverAndVehicleListByVehicleInfo(String vehicleInfoId, String accountId) {

		return vehicleInfoExtDao.getAuditDriverAndVehicleListByVehicleId(vehicleInfoId, accountId);
	}

	@Override
	public boolean canEdit(String status, String plateNumber, String accountId) {
		boolean canEdit = true;

		if (Global.STATUS_WAIT.toString().equals(status)) {
			canEdit = false;
		} else if (Global.STATUS_ENTRY_NOT_FINISHED.toString().equals(status)) {
			canEdit = true;
		} else {
			// 根据车牌号和账户ID查询当前账户下的车是否有待审核的记录
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("accountId", accountId);
			params.put("plateNumber", plateNumber);
			params.put("status", Global.STATUS_WAIT.toString());
			params.put("isDeleted", Global.ISDEL_NORMAL.toString());
			List<Map<String, Object>> vehicles = vehicleDao.find(params);
			if (!ValidateUtils.isEmpty(vehicles)) {
				canEdit = false;
			}
		}
		return canEdit;
	}

	@Override
	public VehicleInfoVo getVehicleInfo(String vehicleInfoId) {
		String status = "";
		VehicleInfoVo vo = new VehicleInfoVo();
		if (ValidateUtils.isEmpty(vehicleInfoId)) {
			throw new RestException(ErrorCode.ERROR_800001.getCode(), ErrorCode.ERROR_800001.getDesc());
		}
		VehicleInfo info = vehicleDao.get(vehicleInfoId);
		if (ValidateUtils.isEmpty(info)) {
			RealVehicleInfo realInfo = vehicleDao_real.get(vehicleInfoId);
			VehicleValidator.valid_exist(!ValidateUtils.isEmpty(realInfo));
			beanMapper.map(realInfo, vo);
		} else {
			beanMapper.map(info, vo);
		}
		return vo;
	}

}
