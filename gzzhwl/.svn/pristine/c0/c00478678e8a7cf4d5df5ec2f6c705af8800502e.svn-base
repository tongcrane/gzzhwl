package com.gzzhwl.admin.payables.service.impl;

import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.gzzhwl.admin.contract.service.ContractService;
import com.gzzhwl.admin.load.service.LoadFeedbackService;
import com.gzzhwl.admin.payables.service.PayablesService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.constant.LoadFeedBackType;
import com.gzzhwl.core.data.dao.DriverContractInfoDao;
import com.gzzhwl.core.data.dao.OrderLoadInfoDao;
import com.gzzhwl.core.data.dao.PayablesInfoDao;
import com.gzzhwl.core.data.extdao.DriverContractInfoExtDao;
import com.gzzhwl.core.data.extdao.OrderLoadInfoExtDao;
import com.gzzhwl.core.data.model.DriverContractInfo;
import com.gzzhwl.core.data.model.LoadFeedbackLog;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.data.model.PayablesInfo;
import com.gzzhwl.core.data.model.RegionInfo;

@Service
public class PayablesServiceImpl implements PayablesService {

	@Autowired
	private OrderLoadInfoExtDao orderLoadInfoExtDao;
	@Autowired
	private ContractService contractService;
	@Autowired
	private DriverContractInfoExtDao driverContractInfoExtDao;
	@Autowired
	private OrderLoadInfoDao orderLoadInfoDao;
	@Autowired
	private LoadFeedbackService loadFeedbackService;
	@Autowired
	private RegionService regionService;
	@Autowired
	private PayablesInfoDao payablesDao;
	@Autowired
	private DriverContractInfoDao driverContractDao;

	@Override
	public Map<String, Object> getPayDetail(String contractId) {
		DriverContractInfo driverContractInfo = driverContractDao.get(contractId);
		String loadId = driverContractInfo.getLoadId();

		Map<String, Object> resMap = Maps.newHashMap();

		Map<String, Object> payMap = driverContractInfoExtDao.payLoadDetail(contractId);

		String startCodeP = (String) payMap.get("startCodeP");
		String startCodePCn = this.getCodeCn(startCodeP);
		payMap.put("startCodePCn", startCodePCn);

		String startCodeC = (String) payMap.get("startCodeC");
		String startCodeCCn = this.getCodeCn(startCodeC);
		payMap.put("startCodeCCn", startCodeCCn);

		String endCodeP = (String) payMap.get("endCodeP");
		String endCodePCn = this.getCodeCn(endCodeP);
		payMap.put("endCodePCn", endCodePCn);

		String endCodeC = (String) payMap.get("endCodeC");
		String endCodeCCn = this.getCodeCn(endCodeC);
		payMap.put("endCodeCCn", endCodeCCn);

		List<Map<String, Object>> feedBackList = loadFeedbackService.getLoadFeedbackList(loadId, null,
				new String[] { LoadFeedBackType.VEHICLE.getCode() }, LoadFeedbackLog.ISEND_YES, null, null);

		resMap.put("payVehicleInfo", payMap);
		resMap.put("payChargesInfo", this.getPayChargesInfo(contractId));
		resMap.put("feedBackList", feedBackList);

		return resMap;
	}

	private String getCodeCn(String code) {
		if (StringUtils.isNotBlank(code)) {
			RegionInfo startCodePCn = regionService.findByCode(code);
			if (startCodePCn != null) {
				return startCodePCn.getRegionName();
			}
		}
		return "";
	}

	@Override
	public Map<String, Object> getPayChargesInfo(String contractId) {

		DriverContractInfo driverContractInfo = driverContractDao.get(contractId);
		String loadId = driverContractInfo.getLoadId();

		OrderLoadInfo orderLoadInfo = orderLoadInfoDao.get(contractId);

		String prePay = orderLoadInfo.getPrePay() != null ? orderLoadInfo.getPrePay() : "0";// 预付现金
		String oilPay = orderLoadInfo.getOilPay() != null ? orderLoadInfo.getOilPay() : "0";// 预付油费
		String oilCardNo = orderLoadInfo.getOilCardNo();// 油卡卡号
		String freightPrice = orderLoadInfo.getFreightPrice() != null ? orderLoadInfo.getFreightPrice() : "0";// 纯运费
		String feedBackPrice = loadFeedbackService.getPayFeedbackCharges(loadId);// 异常反馈费用
		if (feedBackPrice == null) {
			feedBackPrice = "0";
		}
		BigDecimal totalPrice = new BigDecimal(prePay).add(new BigDecimal(oilPay)).add(new BigDecimal(freightPrice))
				.add(new BigDecimal(feedBackPrice));

		Map<String, Object> chargesMap = Maps.newHashMap();
		chargesMap.put("prePay", prePay);
		chargesMap.put("oilPay", oilPay);
		chargesMap.put("oilCardNo", oilCardNo);
		chargesMap.put("freightPrice", freightPrice);
		chargesMap.put("feedBackPrice", feedBackPrice);
		chargesMap.put("totalPrice", new java.text.DecimalFormat("#.00").format(totalPrice));

		return chargesMap;
	}

	@Override
	public void verifyPayables(String contractId, String staffId) {
		DriverContractInfo driverContractInfo = driverContractDao.get(contractId);
		String loadId = driverContractInfo.getLoadId();

		// 验证异常反馈金额是否有为空的
		loadFeedbackService.revFeedbackValidator(loadId);

		// 司机合同流程结转
		contractService.doVerified(contractId, staffId);

		// 保存应付信息
		this.savePayInfo(loadId, contractId, staffId);

	}

	private void savePayInfo(String loadId, String contractId, String staffId) {
		OrderLoadInfo orderLoadInfo = orderLoadInfoDao.get(contractId);

		String prePay = orderLoadInfo.getPrePay() != null ? orderLoadInfo.getPrePay() : "0";// 预付现金
		String oilPay = orderLoadInfo.getOilPay() != null ? orderLoadInfo.getOilPay() : "0";// 预付油费
		String oilCardNo = orderLoadInfo.getOilCardNo();// 油卡卡号
		String freightPrice = orderLoadInfo.getFreightPrice() != null ? orderLoadInfo.getFreightPrice() : "0";// 纯运费
		String feedBackPrice = loadFeedbackService.getPayFeedbackCharges(loadId);// 异常反馈费用
		if (feedBackPrice == null) {
			feedBackPrice = "0";
		}
		BigDecimal totalPrice = new BigDecimal(prePay).add(new BigDecimal(oilPay)).add(new BigDecimal(freightPrice))
				.add(new BigDecimal(feedBackPrice));

		PayablesInfo pay = new PayablesInfo();
		pay.setContractId(contractId);
		pay.setExceptionTotal(feedBackPrice);
		pay.setFreightPrice(freightPrice);
		pay.setOilCardNo(oilCardNo);
		pay.setOilPay(oilPay);
		pay.setPrePay(prePay);
		pay.setTotal(totalPrice.toString());
		pay.setCreatedBy(staffId);

		payablesDao.insert(pay);
	}

	@Override
	public void exportedExcel(List<Map<String, Object>> exportObj) {
		// 第一步，创建一个webbook，对应一个Excel文件
		HSSFWorkbook wb = new HSSFWorkbook();
		// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
		HSSFSheet sheet = wb.createSheet("应收对账单");
		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
		HSSFRow row = sheet.createRow((int) 0);
		// 第四步，创建单元格，并设置值表头 设置表头居中
		HSSFCellStyle style = wb.createCellStyle();

		// 把水平对齐方式指定为居中
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		// 把垂直对齐方式指定为居中
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		HSSFFont font = wb.createFont();
		font.setFontName("宋体");
		font.setFontHeightInPoints((short) 12);// 设置字体大小
		style.setFont(font);

		HSSFCell cell = row.createCell(0);
		cell.setCellValue("序号");
		cell.setCellStyle(style);
		cell = row.createCell(1);
		cell.setCellValue("客户全称");
		cell.setCellStyle(style);
		cell = row.createCell(2);
		cell.setCellValue("运单号");
		cell.setCellStyle(style);
		cell = row.createCell(3);
		cell.setCellValue("提货单号");
		cell.setCellStyle(style);
		cell = row.createCell(4);
		cell.setCellValue("货主合同号");
		cell.setCellStyle(style);
		cell = row.createCell(5);
		cell.setCellValue("结款对象");
		cell.setCellStyle(style);
		cell = row.createCell(6);
		cell.setCellValue("线路-始发地");
		cell.setCellStyle(style);
		cell = row.createCell(7);
		cell.setCellValue("线路-目的地");
		cell.setCellStyle(style);
		cell = row.createCell(8);
		cell.setCellValue("发车时间");
		cell.setCellStyle(style);
		cell = row.createCell(9);
		cell.setCellValue("车牌号");
		cell.setCellStyle(style);
		cell = row.createCell(10);
		cell.setCellValue("业务部门");
		cell.setCellStyle(style);
		cell = row.createCell(11);
		cell.setCellValue("纯运费");
		cell.setCellStyle(style);
		cell = row.createCell(12);
		cell.setCellValue("是否预估");
		cell.setCellStyle(style);
		cell = row.createCell(13);
		cell.setCellValue("预付现金");
		cell.setCellStyle(style);
		cell = row.createCell(14);
		cell.setCellValue("预付油卡");
		cell.setCellStyle(style);
		cell = row.createCell(15);
		cell.setCellValue("其他费用合计");
		cell.setCellStyle(style);
		cell = row.createCell(16);
		cell.setCellValue("异常原因");
		cell.setCellStyle(style);
		cell = row.createCell(17);
		cell.setCellValue("异常金额");
		cell.setCellStyle(style);
		cell = row.createCell(18);
		cell.setCellValue("异常描述");
		cell.setCellStyle(style);
		cell = row.createCell(19);
		cell.setCellValue("创建人");
		cell.setCellStyle(style);
		cell = row.createCell(20);
		cell.setCellValue("异常提交时间");
		cell.setCellStyle(style);
		
		int current = 1;
		for (int i = 0; i < exportObj.size(); i++) {

			row = sheet.createRow(current);
			Iterator iterator = exportObj.get(i).entrySet().iterator();
			// row.createCell(0).setCellValue(i + 1);
			List<Map<String, Object>> feedbackList = (List<Map<String, Object>>) exportObj.get(i).get("feedbackList");
			
			int j = 0;
			while (iterator.hasNext()) {
				Map.Entry<String, Object> entry1 = (Map.Entry<String, Object>) iterator.next();
				if (entry1.getKey().equals("feedbackList")) {
					for (int k = 0; k < feedbackList.size(); k++) {
						if (k > 0) {
							row = sheet.createRow(current + k);
						}
						Iterator iterator_feedbackSet = feedbackList.get(k).entrySet().iterator();
						int s = 0;
						while (iterator_feedbackSet.hasNext()) {
							Map.Entry<String, Object> feedbackMap = (Map.Entry<String, Object>) iterator_feedbackSet
									.next();
							cell = row.createCell(j + s);
							cell.setCellValue((String) feedbackMap.getValue());
							cell.setCellStyle(style);
							s++;
						}
					}

				} else {
					cell = row.createCell(j);
					CellRangeAddress region = new CellRangeAddress(current, current+feedbackList.size()-1, j, j);
					sheet.addMergedRegion(region);
					cell.setCellValue((String) entry1.getValue());
					cell.setCellStyle(style);
				}

				j++;
			}
			
			current = current + feedbackList.size() +1 ;
		}

		// 第六步，将文件存到指定位置
		try {
			FileOutputStream fout = new FileOutputStream("D:/应收对账单.xls");
			wb.write(fout);
			fout.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		PayablesServiceImpl p = new PayablesServiceImpl();

		List<Map<String, Object>> exportObj = new ArrayList<>();

		for (int s = 0; s < 5; s++) {
			Map<String, Object> exportObjMap = new HashMap<>();
			for (int i = 0; i < 15; i++) {
				exportObjMap.put(i + "", i + "");
			}
			List<Map<String, Object>> feedbackList = new ArrayList<>();

			for (int j = 0; j < 3; j++) {
				Map<String, Object> feedbacMap = new HashMap<>();
				for (int i = 0; i < 4; i++) {
					feedbacMap.put(i + "", i + "");
				}
				feedbackList.add(feedbacMap);
			}
			exportObjMap.put("feedbackList", feedbackList);
			exportObj.add(exportObjMap);
		}

		p.exportedExcel(exportObj);
	}

}
