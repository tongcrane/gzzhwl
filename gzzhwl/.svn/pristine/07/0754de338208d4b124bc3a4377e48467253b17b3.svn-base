package com.gzzhwl.admin.load.service.impl;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gzzhwl.admin.load.service.LoadBillService;
import com.gzzhwl.admin.load.service.LoadHistoryService;
import com.gzzhwl.admin.load.vo.LoadInfoVO;
import com.gzzhwl.admin.load.vo.LoadQueryVo;
import com.gzzhwl.admin.order.service.OrderLinkStatusService;
import com.gzzhwl.common.model.FlowActionCategory;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.constant.DataSource;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.constant.SeqNoKey;
import com.gzzhwl.core.data.dao.LoadDriverInfoDao;
import com.gzzhwl.core.data.dao.OrderLoadInfoDao;
import com.gzzhwl.core.data.model.FlowDef;
import com.gzzhwl.core.data.model.FlowStatus;
import com.gzzhwl.core.data.model.LoadDriverInfo;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.data.model.RegionInfo;
import com.gzzhwl.core.page.Page;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.rest.exception.RestException;

@Service
public class LoadBillServiceImpl implements LoadBillService {
	@Autowired
	private OrderLinkStatusService orderLinkStatusService;
	@Autowired
	private Mapper beanMapper;
	@Autowired
	private LoadHistoryService loadHistoryService;
	@Autowired
	private FlowsService flowService;
	@Autowired
	private OrderLoadInfoDao orderLoadInfoDao;
	@Autowired
	private LoadDriverInfoDao loadDriverInfoDao;
	@Autowired
	private RegionService regionService;

	@Override
	public String createLoad(LoadInfoVO loadInfo, Integer departId, String staffId) throws RestException {
		OrderLoadInfo baseInfo = beanMapper.map(loadInfo, OrderLoadInfo.class);
		List<String> driverList = loadInfo.getDriverList();
		return this.saveLoad(baseInfo, driverList, departId, staffId);
	}

	@Override
	public boolean cancelLoad(String orderId, String staffId) throws RestException {
		String loadId = this.getCurrentLoadBill(orderId);
		if (StringUtils.isNotBlank(loadId)) {
			String actionCode = "12";// 取消提货单
			OrderLoadInfo orderLoadInfo = orderLoadInfoDao.get(loadId);
			String currentStatus = orderLoadInfo.getStatus();
			FlowDef flowDef = flowService.executeFlow(ZHFlow.LOAD_BILL, actionCode, currentStatus,
					FlowActionCategory.CBS);
			orderLoadInfo.setStatus(flowDef.getTransitionStatus());
			orderLoadInfo.setUpdatedBy(staffId);
			orderLoadInfoDao.updateSelective(orderLoadInfo);
			loadHistoryService.saveLoadHistory(loadId, flowDef.getLinkedStatus(), null, flowDef, staffId);
		}
		return orderLinkStatusService.cancelLoad(orderId, staffId);
	}

	@Override
	public String getCurrentLoadBill(String orderId) throws RestException {
		Map<String, Object> params = Maps.newHashMap();
		params.put("flowName", ZHFlow.LOAD_BILL.getName());
		params.put("orderId", orderId);
		params.put("statusType", FlowStatus.NORMAL_TYPE);
		return orderLoadInfoDao.getLoadByOrder(params);
	}

	private String saveLoad(OrderLoadInfo loadInfo, List<String> driverList, Integer departId, String staffId)
			throws RestException {
		FlowDef flowDef = flowService.startFlow(ZHFlow.LOAD_BILL, FlowActionCategory.CBS);
		String loadId = IdentifierUtils.getId().generate().toString();
		String loadNo = IdentifierUtils.getSequence(SeqNoKey.LOAD).generate().toString();
		loadInfo.setBelongDepartId(departId + "");
		loadInfo.setCreatedBy(staffId);
		loadInfo.setUpdatedBy(staffId);
		loadInfo.setIsDeleted(Global.ISDEL_NORMAL.toString());
		loadInfo.setLoadId(loadId);
		loadInfo.setLoadNo(loadNo);
		loadInfo.setQuotedId(null);
		loadInfo.setSource(DataSource.PLATFORM.getCode());
		loadInfo.setStatus(flowDef.getTransitionStatus());
		loadInfo.setType(OrderLoadInfo.LOAD_BILL);
		List<LoadDriverInfo> loadDriverList = Lists.newArrayList();
		for (String driverId : driverList) {
			LoadDriverInfo driverInfo = new LoadDriverInfo();
			driverInfo.setDriverInfoId(driverId);
			driverInfo.setLoadId(loadId);
			loadDriverList.add(driverInfo);
		}

		orderLoadInfoDao.insert(loadInfo);
		if (CollectionUtils.isNotEmpty(loadDriverList)) {
			for (LoadDriverInfo loadDriverInfo : loadDriverList) {
				loadDriverInfoDao.insert(loadDriverInfo);
			}
		}

		loadHistoryService.saveLoadHistory(loadId, flowDef.getLinkedStatus(), null, flowDef, staffId);
		String orderId = loadInfo.getOrderId();
		orderLinkStatusService.loadOrder(orderId, staffId);
		return loadId;
	}

	@Override
	public Page<Map<String, Object>> pageLoads(LoadQueryVo queryVo, int pageIndex, int pageSize) {
		Map<String, Object> params = queryVo.getParam();
		Page<Map<String, Object>> loads = orderLoadInfoDao.pageLoads(params, pageIndex, pageSize);
		List<Map<String,Object>> list=loads.getRows();
		for(Map<String,Object> map:list) {
			String startCodeP = (String) map.get("startCodeP");
			String startCodePCn = this.getCodeCn(startCodeP);
			map.put("startCodePCn", startCodePCn);

			String startCodeC = (String) map.get("startCodeC");
			String startCodeCCn = this.getCodeCn(startCodeC);
			map.put("startCodeCCn", startCodeCCn);

			String endCodeP = (String) map.get("endCodeP");
			String endCodePCn = this.getCodeCn(endCodeP);
			map.put("endCodePCn", endCodePCn);

			String endCodeC = (String) map.get("endCodeC");
			String endCodeCCn = this.getCodeCn(endCodeC);
			map.put("endCodeCCn", endCodeCCn);
		}
		return loads;
	}

	@Override
	public Map<String, Object> getLoadDetail(String loadId) {
		// TODO Auto-generated method stub
		return null;
	}

	private String getCodeCn(String code) {
		if (StringUtils.isNotBlank(code)) {
			RegionInfo startCodePCn = regionService.findByCode(code);
			if (startCodePCn != null) {
				return startCodePCn.getRegionName();
			}
		}
		return "";
	}
}
