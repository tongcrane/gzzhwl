package com.gzzhwl.api.load.service.impl;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.gzzhwl.api.load.service.TripService;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.data.extdao.OrderInfoExtDao;
import com.gzzhwl.core.data.extdao.RealDriverInfoExtDao;
import com.gzzhwl.core.data.model.FlowStatus;
import com.gzzhwl.core.data.model.RealDriverInfo;
import com.gzzhwl.core.data.model.RegionInfo;

@Service
public class TripServiceImpl implements TripService {
	
	@Autowired
	private OrderInfoExtDao orderInfoExtDao;
	
	@Autowired
	private RealDriverInfoExtDao realDriverInfoExtDao;
	
	@Autowired
	private FlowsService flowsService;
	
	@Autowired
	private RegionService regionService;
	

	@Override
	public List<Map<String, Object>> getDriverOrderList(String accountId,String timeStamp) {
		
		RealDriverInfo dirverInfo = realDriverInfoExtDao.getDriverInfoByAccountId(accountId);
		
		List<Map<String,Object>> listMap = orderInfoExtDao.getDriverOrderList(dirverInfo.getDriverInfoId(), timeStamp);
		
		// 更新状态描述
		CollectionUtils.transform(listMap,
				new Transformer<Map<String, Object>, Map<String, Object>>() {
					@Override
					public Map<String, Object> transform(Map<String, Object> input) {
						String status = (String) input.get("status");
						if (StringUtils.isNotBlank(status)) {
							FlowStatus statusCn = flowsService.getStatus(ZHFlow.LOAD_BILL, status);
							input.put("statusCn", statusCn.getName());
						} else {
							input.put("statusCn", StringUtils.EMPTY);
						}
						
						String startCodeP = (String) input.get("startCodeP");
						input.put("startCodePCn", this.getCodeCn(startCodeP));
				
						String endCodeP = (String) input.get("endCodeP");
						input.put("endCodePCn", this.getCodeCn(endCodeP));

						String startCodeC = (String) input.get("startCodeC");
						input.put("startCodeCCn", this.getCodeCn(startCodeC));
						

						String endCodeC = (String) input.get("endCodeC");
						input.put("endCodeCCn", this.getCodeCn(endCodeC));
						
						String transferCodeP = (String) input.get("transferCodeP");
						input.put("transferCodePCn", this.getCodeCn(transferCodeP));
						

						String transferCodeC = (String) input.get("transferCodeC");
						input.put("transferCodeCCn", this.getCodeCn(transferCodeC));
						
						String senderAreaCode = (String) input.get("sendArea");
						if (StringUtils.isNotBlank(endCodeP)) {
							List<RegionInfo> regionList = regionService.findRootByCode(senderAreaCode);
							input.put("senderAreaList", regionList);
						} else {
							input.put("senderAreaList", Lists.newArrayList());
						}
						
						String receiveAreaCode = (String) input.get("receiveArea");
						if (StringUtils.isNotBlank(endCodeP)) {
							List<RegionInfo> regionList = regionService.findRootByCode(receiveAreaCode);
							input.put("receiveAreaList", regionList);
						} else {
							input.put("receiveAreaList", Lists.newArrayList());
						}
						
						return input;
					}
					
					private String getCodeCn(String code) {
						if (StringUtils.isNotBlank(code)) {
							RegionInfo startCodePCn = regionService.findByCode(code);
							if (startCodePCn != null) {
								return startCodePCn.getRegionName();
							}
						}
						return "";
					}
				});
		
		return listMap;
	}

}
