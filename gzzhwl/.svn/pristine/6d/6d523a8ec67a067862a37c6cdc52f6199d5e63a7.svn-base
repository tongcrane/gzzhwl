package com.gzzhwl.admin.load.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.gzzhwl.admin.contract.service.ContractService;
import com.gzzhwl.admin.load.service.LoadBillService;
import com.gzzhwl.admin.load.service.LoadHistoryService;
import com.gzzhwl.admin.load.vo.LoadInfoVO;
import com.gzzhwl.admin.load.vo.LoadQueryVo;
import com.gzzhwl.admin.order.service.OrderLinkStatusService;
import com.gzzhwl.common.model.FlowActionCategory;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.common.service.RegionService;
import com.gzzhwl.core.constant.ErrorCode;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.constant.SeqNoKey;
import com.gzzhwl.core.data.dao.LoadDriverInfoDao;
import com.gzzhwl.core.data.dao.OrderLoadInfoDao;
import com.gzzhwl.core.data.extdao.OrderInfoExtDao;
import com.gzzhwl.core.data.model.FlowDef;
import com.gzzhwl.core.data.model.FlowStatus;
import com.gzzhwl.core.data.model.LoadDriverInfo;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.data.model.RegionInfo;
import com.gzzhwl.core.page.Page;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.rest.exception.RestException;

@Service
public class LoadBillServiceImpl implements LoadBillService {
	@Autowired
	private OrderLinkStatusService orderLinkStatusService;
	@Autowired
	private Mapper beanMapper;
	@Autowired
	private LoadHistoryService loadHistoryService;
	@Autowired
	private FlowsService flowService;
	@Autowired
	private OrderLoadInfoDao orderLoadInfoDao;
	@Autowired
	private LoadDriverInfoDao loadDriverInfoDao;
	@Autowired
	private OrderInfoExtDao orderInfoExtDao;
	@Autowired
	private RegionService regionService;
	@Autowired
	private ContractService contractService;

	@Override
	public String createLoad(LoadInfoVO loadInfoVO, String staffId) throws RestException {
		String actionCode = "13";// 生成提货单
		String loadId = loadInfoVO.getLoadId();
		OrderLoadInfo loadInfo = orderLoadInfoDao.get(loadId);
		String currentStatus = loadInfo.getStatus();
		FlowDef flowDef = flowService.executeFlow(ZHFlow.LOAD_BILL, actionCode, currentStatus, FlowActionCategory.CBS);
		beanMapper.map(loadInfoVO, loadInfo);
		String loadNo = IdentifierUtils.getSequence(SeqNoKey.LOAD).generate().toString();
		loadInfo.setUpdatedBy(staffId);
		loadInfo.setLoadNo(loadNo);
		loadInfo.setQuotedId(null);
		loadInfo.setStatus(flowDef.getTransitionStatus());
		List<String> driverList = loadInfoVO.getDriverList();
		for (String driverId : driverList) {
			LoadDriverInfo driverInfo = new LoadDriverInfo();
			driverInfo.setDriverInfoId(driverId);
			driverInfo.setLoadId(loadId);
			loadDriverInfoDao.insert(driverInfo);
		}
		orderLoadInfoDao.updateSelective(loadInfo);
		loadHistoryService.saveLoadHistory(loadId, flowDef.getLinkedStatus(), null, flowDef, staffId);
		String orderId = loadInfo.getOrderId();
		orderLinkStatusService.loadOrder(orderId, staffId);

		return loadId;
	}

	@Override
	public boolean cancelLoad(String loadId, String staffId) throws RestException {
		String actionCode = "12";// 取消提货单
		OrderLoadInfo orderLoadInfo = orderLoadInfoDao.get(loadId);
		String currentStatus = orderLoadInfo.getStatus();
		FlowDef flowDef = flowService.executeFlow(ZHFlow.LOAD_BILL, actionCode, currentStatus, FlowActionCategory.CBS);
		orderLoadInfo.setStatus(flowDef.getTransitionStatus());
		orderLoadInfo.setUpdatedBy(staffId);
		orderLoadInfoDao.updateSelective(orderLoadInfo);
		loadHistoryService.saveLoadHistory(loadId, currentStatus, null, flowDef, staffId);
		String orderId = orderLoadInfo.getOrderId();
		orderLinkStatusService.cancelLoad(orderId, staffId);
		return true;
	}

	@Override
	public String getCurrentLoadBill(String orderId) throws RestException {
		Map<String, Object> params = Maps.newHashMap();
		params.put("flowName", ZHFlow.LOAD_BILL.getName());
		params.put("orderId", orderId);
		params.put("statusType", FlowStatus.NORMAL_TYPE);
		return orderLoadInfoDao.getLoadByOrder(params);
	}

	@Override
	public Page<Map<String, Object>> pageLoads(LoadQueryVo queryVo, int pageIndex, int pageSize) throws RestException {
		Map<String, Object> params = queryVo.getParam();
		params.put("loadType", OrderLoadInfo.LOAD_BILL);
		params.put("driverContractType", OrderLoadInfo.DRIVER_CONTRACT_BILL);
		Page<Map<String, Object>> loads = orderLoadInfoDao.pageLoads(params, pageIndex, pageSize);
		List<Map<String, Object>> list = loads.getRows();
		for (Map<String, Object> map : list) {
			String startCodeP = (String) map.get("startCodeP");
			String startCodePCn = this.getCodeCn(startCodeP);
			map.put("startCodePCn", startCodePCn);

			String startCodeC = (String) map.get("startCodeC");
			String startCodeCCn = this.getCodeCn(startCodeC);
			map.put("startCodeCCn", startCodeCCn);

			String endCodeP = (String) map.get("endCodeP");
			String endCodePCn = this.getCodeCn(endCodeP);
			map.put("endCodePCn", endCodePCn);

			String endCodeC = (String) map.get("endCodeC");
			String endCodeCCn = this.getCodeCn(endCodeC);
			map.put("endCodeCCn", endCodeCCn);
		}
		return loads;
	}

	@Override
	public void modifyLoad(LoadInfoVO loadInfoVO,String staffId) throws RestException {	
		String actionCode="09";   //修改提货单
		String loadId = loadInfoVO.getLoadId();
		String contractId=contractService.getCurrentContract(loadId);
		if(StringUtils.isNotEmpty(contractId)) {
			throw new RestException(ErrorCode.ERROR_110003.getCode(), ErrorCode.ERROR_110003.getDesc());
		} else {
			OrderLoadInfo loadInfo = orderLoadInfoDao.get(loadId);
			String currentStatus = loadInfo.getStatus();
			FlowDef flowDef = flowService.executeFlow(ZHFlow.LOAD_BILL, actionCode, currentStatus, FlowActionCategory.CBS);
			beanMapper.map(loadInfoVO, loadInfo);
			loadInfo.setStatus(flowDef.getTransitionStatus());
			loadInfo.setUpdatedBy(staffId);
			loadDriverInfoDao.delLoadDriver(loadId);
			List<String> driverList = loadInfoVO.getDriverList();
			for (String driverId : driverList) {
				LoadDriverInfo driverInfo = new LoadDriverInfo();
				driverInfo.setDriverInfoId(driverId);
				driverInfo.setLoadId(loadId);
				loadDriverInfoDao.insert(driverInfo);
			}
			orderLoadInfoDao.updateSelective(loadInfo);
			loadHistoryService.saveLoadHistory(loadId, flowDef.getLinkedStatus(), null, flowDef, staffId);
		}
	}
	
	@Override
	public void doTrip(String loadId,String staffId) throws RestException {
		String actionCode="11";   //发车
		OrderLoadInfo orderLoadInfo=orderLoadInfoDao.get(loadId);
		FlowDef flowdef = flowService.executeFlow(ZHFlow.LOAD_BILL, actionCode, orderLoadInfo.getStatus(),FlowActionCategory.CBS);
		orderLoadInfo.setStatus(flowdef.getTransitionStatus());
		orderLoadInfo.setUpdatedBy(staffId);
		orderLoadInfoDao.updateSelective(orderLoadInfo);
		loadHistoryService.saveLoadHistory(loadId, flowdef.getLinkedStatus(), null, flowdef, staffId);
	}
	
	@Override
	public Map<String, Object> getLoadDetail(String loadId) throws RestException {
		OrderLoadInfo orderLoad=orderLoadInfoDao.get(loadId);
		String orderId=orderLoad.getOrderId();
		Map<String, Object> loadDetail = new HashMap<String, Object>();
		Map<String, Object> orderInfo = this.getLoadOrderInfo(orderId);
		Map<String, Object> loadInfo = this.getLoadInfo(loadId);
		loadDetail.put("orderInfo", orderInfo);
		loadDetail.put("loadInfo", loadInfo);
		return loadDetail;
	}

	private Map<String, Object> getLoadOrderInfo(String orderId) {
		Map<String, Object> orderInfo = orderInfoExtDao.getLoadOrderInfo(orderId);
		if (orderInfo != null) {
			String startCodeP = (String) orderInfo.get("startCodeP");
			String startCodePCn = this.getCodeCn(startCodeP);
			orderInfo.put("startCodePCn", startCodePCn);

			String startCodeC = (String) orderInfo.get("startCodeC");
			String startCodeCCn = this.getCodeCn(startCodeC);
			orderInfo.put("startCodeCCn", startCodeCCn);

			String endCodeP = (String) orderInfo.get("endCodeP");
			String endCodePCn = this.getCodeCn(endCodeP);
			orderInfo.put("endCodePCn", endCodePCn);

			String endCodeC = (String) orderInfo.get("endCodeC");
			String endCodeCCn = this.getCodeCn(endCodeC);
			orderInfo.put("endCodeCCn", endCodeCCn);
			String sendArea = (String) orderInfo.get("sendArea");
			String receiveArea = (String) orderInfo.get("receiveArea");
			if (sendArea != null) {
				List<RegionInfo> sendRegion = regionService.findRootByCode(sendArea);
				orderInfo.put("sendRegion", sendRegion);
			}
			if (receiveArea != null) {
				List<RegionInfo> receiveRegion = regionService.findRootByCode(receiveArea);
				orderInfo.put("receiveRegion", receiveRegion);
			}
		}
		return orderInfo;
	}

	private Map<String, Object> getLoadInfo(String loadId) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("loadId", loadId);
		params.put("isDeleted", Global.ISDEL_NORMAL.toString());
		Map<String, Object> loadInfo = orderLoadInfoDao.getLoadInfo(params);
		return loadInfo;
	}

	private String getCodeCn(String code) {
		if (StringUtils.isNotBlank(code)) {
			RegionInfo startCodePCn = regionService.findByCode(code);
			if (startCodePCn != null) {
				return startCodePCn.getRegionName();
			}
		}
		return "";
	}

}
