package com.gzzhwl.push.strategy.impl;

import java.util.Collection;
import java.util.Map;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.gzzhwl.core.data.dao.PushRecordDao;
import com.gzzhwl.core.data.model.PushDevice;
import com.gzzhwl.core.data.model.PushInfo;
import com.gzzhwl.core.data.model.PushRecord;
import com.gzzhwl.core.support.PushDeviceSupport;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.core.utils.JacksonJsonMapper;
import com.gzzhwl.push.annotation.PushServiceStrategy;
import com.gzzhwl.push.model.PushItem;
import com.gzzhwl.push.service.PushNotificationService;
import com.gzzhwl.push.service.PushService;
import com.gzzhwl.push.strategy.PushServiceStrategyFactory;

@Service
public class PushServiceStrategyFactoryImpl implements PushServiceStrategyFactory, ApplicationContextAware {
	private Map<String, PushService> serviceStrategyMap = Maps.newHashMap();
	@Autowired
	private PushNotificationService pushNotificationService;
	@Autowired
	private PushRecordDao pushRecordDao;

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		Collection<PushService> allService = applicationContext.getBeansOfType(PushService.class).values();
		for (PushService service : allService) {
			PushServiceStrategy strategy = service.getClass().getAnnotation(PushServiceStrategy.class);
			if (strategy != null) {
				serviceStrategyMap.put(strategy.channel() + "_" + strategy.type().getCode(), service);
			}
		}
	}

	@Override
	public boolean pushToSingleUser(PushItem item, String accountId) {
		PushInfo pushInfo = pushNotificationService.getLastestPushInfo(accountId);
		if (pushInfo != null) {
			String deviceId = pushInfo.getDeviceId();
			PushDevice device = PushDeviceSupport.findDeviceById(deviceId);
			String key = device.getChannel() + "_" + device.getType();
			if (serviceStrategyMap.containsKey(key)) {
				PushService service = serviceStrategyMap.get(key);
				boolean success = service.pushToSingleUser(item, pushInfo.getToken());
				PushRecord pushRecord = new PushRecord();
				String recordId = IdentifierUtils.getId().generate().toString();
				pushRecord.setRecordId(recordId);
				pushRecord.setAccountId(accountId);
				pushRecord.setDeviceId(deviceId);
				pushRecord.setToken(pushInfo.getToken());
				pushRecord.setContent(JacksonJsonMapper.objectToJson(item.getParam()));
				pushRecord.setResult(success ? "01" : "02");
				pushRecordDao.insert(pushRecord);
				return success;
			}
		}
		return false;
	}
}
