package com.gzzhwl.api.load.controller;

import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.gzzhwl.admin.load.service.LoadFeedbackService;
import com.gzzhwl.admin.load.vo.LoadFeedbackListVo;
import com.gzzhwl.api.load.service.TripService;
import com.gzzhwl.core.constant.ErrorCode;
import com.gzzhwl.core.data.model.AccountInfo;
import com.gzzhwl.core.utils.DateUtils;
import com.gzzhwl.core.utils.ValidateUtils;
import com.gzzhwl.rest.exception.RestException;
import com.gzzhwl.rest.security.utils.SecurityUtils;
import com.gzzhwl.rest.springmvc.annotation.Authorization;
import com.gzzhwl.rest.springmvc.model.ResponseModel;

@RestController
@RequestMapping("/api/trip")
public class TripController {

	@Autowired
	private TripService tripService;

	@Autowired
	private LoadFeedbackService loadFeedbackService;

	@RequestMapping(value = "/getDriverOrderList", method = RequestMethod.GET)
	public ResponseModel getDriverOrderList(@Authorization AccountInfo accountInfo)
			throws ParseException, IOException {

		String accountId = accountInfo.getAccountId();

		List<Map<String, Object>> listMap = tripService.getDriverOrderList(accountId);

		return new ResponseModel(listMap);
	}

	/**
	 * 异常反馈图片上传
	 * 
	 * @param request
	 * @param vehicleInfoId
	 * @param type
	 * @return
	 */
	@RequestMapping(value = "/feedBackUploadImage", method = RequestMethod.POST)
	public ResponseModel feedBackUploadImage(@RequestParam MultipartFile image, @Authorization AccountInfo accountInfo) {

		String staffId = SecurityUtils.getSubject().getStaffId();

		String imageId = loadFeedbackService.updateImage(image, staffId);

		Map<String, Object> resMap = new HashMap<>();
		resMap.put("imageId", imageId);

		return new ResponseModel(resMap);
	}

	/**
	 * 保存异常反馈
	 * 
	 * @param loadFeedbackListVo
	 * @return
	 */
	@RequestMapping(value = "/saveLoadFeedback", method = RequestMethod.POST, consumes = {
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseModel saveLoadFeedback(@RequestBody LoadFeedbackListVo loadFeedbackListVo, @Authorization AccountInfo accountInfo) {

		loadFeedbackService.saveLoadFeedback(loadFeedbackListVo, accountInfo.getAccountId());

		return new ResponseModel(null);
	}

}
