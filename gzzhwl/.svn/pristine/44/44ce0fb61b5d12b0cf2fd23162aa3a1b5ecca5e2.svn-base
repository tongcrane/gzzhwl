package com.gzzhwl.admin.load.service.impl;

import java.util.List;
import java.util.Map;

import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.gzzhwl.admin.load.service.ArrivedManageService;
import com.gzzhwl.admin.load.service.LoadFeedbackService;
import com.gzzhwl.admin.load.service.LoadHistoryService;
import com.gzzhwl.admin.load.service.VADUsedService;
import com.gzzhwl.admin.load.validator.ArrivedValidate;
import com.gzzhwl.admin.load.vo.LoadPrintreceiptVo;
import com.gzzhwl.admin.order.service.OrderLinkStatusService;
import com.gzzhwl.common.model.FlowActionCategory;
import com.gzzhwl.common.model.ZHFlow;
import com.gzzhwl.common.service.FlowsService;
import com.gzzhwl.core.constant.DataSource;
import com.gzzhwl.core.constant.Global;
import com.gzzhwl.core.data.dao.LoadArriveInfoDao;
import com.gzzhwl.core.data.dao.LoadElecreceiptDao;
import com.gzzhwl.core.data.dao.LoadPrintreceiptDao;
import com.gzzhwl.core.data.dao.OrderLoadInfoDao;
import com.gzzhwl.core.data.extdao.LoadElecreceiptExtDao;
import com.gzzhwl.core.data.extdao.LoadPrintreceiptExtDao;
import com.gzzhwl.core.data.model.FlowDef;
import com.gzzhwl.core.data.model.LoadArriveInfo;
import com.gzzhwl.core.data.model.LoadElecreceipt;
import com.gzzhwl.core.data.model.LoadPrintreceipt;
import com.gzzhwl.core.data.model.OrderLoadInfo;
import com.gzzhwl.core.utils.IdentifierUtils;
import com.gzzhwl.core.utils.ValidateUtils;
import com.gzzhwl.rest.exception.RestException;

@Service
public class ArrivedManageServiceImpl implements ArrivedManageService {
	@Autowired
	private LoadArriveInfoDao arriveDao;
	@Autowired
	private FlowsService flowsService;
	@Autowired
	private OrderLoadInfoDao loadDao;
	@Autowired
	private LoadHistoryService loadHistoryService;
	@Autowired
	private OrderLinkStatusService orderLinkStatusService;
	@Autowired
	private LoadElecreceiptDao elecReceiptDao;
	@Autowired
	private LoadElecreceiptExtDao elecReceiptExtDao;
	@Autowired
	private LoadPrintreceiptDao printReceiptDao;
	@Autowired
	private LoadPrintreceiptExtDao printReceiptExtDao;
	@Autowired
	private Mapper beanMapper;
	@Autowired
	private LoadFeedbackService loadFeedbackService;
	@Autowired
	private VADUsedService vadUsedService;
	
	private static final String VERIFY_PASSED = "01";
	private static final String VERIFY_NOT_PASSED = "02";
	
	private OrderLoadInfo executeFlow(String loadId, String actionCode, String actionTime, String staffId) throws RestException {
		ArrivedValidate.valid_load_id(loadId);
		OrderLoadInfo orderLoadInfo = loadDao.get(loadId);
		//验证提货单是否存在
		ArrivedValidate.valid_load_exist(!ValidateUtils.isEmpty(orderLoadInfo));
		String currentStatus = orderLoadInfo.getStatus();
		FlowDef flowDef = flowsService.executeFlow(ZHFlow.LOAD_BILL, actionCode, currentStatus, FlowActionCategory.CBS);
		orderLoadInfo.setStatus(flowDef.getTransitionStatus());
		orderLoadInfo.setUpdatedBy(staffId);
		loadDao.updateSelective(orderLoadInfo);
		loadHistoryService.saveLoadHistory(loadId, currentStatus,actionTime, flowDef, staffId);
		return orderLoadInfo;
	}

	@Override
	public void doArrived(String loadId, String arriveTime, String staffId) throws RestException {
		String actionCode = "17"; // 车辆到达
		//提货单流程结转
		OrderLoadInfo orderLoadInfo = this.executeFlow(loadId, actionCode, arriveTime, staffId);
		
		//订单流程结转
		orderLinkStatusService.doArrive(orderLoadInfo.getOrderId(), staffId);

		LoadArriveInfo arriveInfo = new LoadArriveInfo();
		arriveInfo.setLoadId(loadId);
		arriveInfo.setArriveTime(arriveTime);
		arriveInfo.setArriveTime(staffId);
		arriveDao.insert(arriveInfo);

	}

	@Override
	public void uploadElecReceipt(String loadId, String imageId, String actionTime, String staffId) {
		String actionCode = "18";// 电子回单上传
		//提货单流程结转
		this.executeFlow(loadId, actionCode, actionTime, staffId);

		this.saveElecReceipt(loadId, imageId, actionTime, staffId);

		//释放司机车辆
		vadUsedService.releaseVandD(loadId, staffId);// 解锁司机车辆
	}

	private void saveElecReceipt(String loadId, String imageId, String actionTime, String staffId) {
		LoadElecreceipt elecreceipt = new LoadElecreceipt();
		String receiptId = IdentifierUtils.getId().generate().toString();
		elecreceipt.setReceiptId(receiptId);
		elecreceipt.setLoadId(loadId);
		elecreceipt.setReceiptImageRefId(imageId);
		elecreceipt.setCreatedBy(staffId);
		elecreceipt.setUpdatedBy(staffId);
		elecreceipt.setStatus(Global.STATUS_PASSED.toString());
		elecreceipt.setIsDeleted(Global.ISDEL_NORMAL.toString());
		elecreceipt.setOpTime(actionTime);
		elecreceipt.setSource(DataSource.PLATFORM.getCode());
		elecReceiptDao.insert(elecreceipt);
	}

	@Override
	public void uploadPrintReceipt(LoadPrintreceiptVo vo, String staffId) {
		String actionCode = "19";// 纸质回单上传
		
		//提货单流程结转
		OrderLoadInfo orderLoadInfo = this.executeFlow(vo.getLoadId(), actionCode, null, staffId);
		
		//订单流程结转
		orderLinkStatusService.getPrintReceipt(orderLoadInfo.getOrderId(), staffId);

		this.savePrintReceipt(vo, staffId);

	}
	
	private void savePrintReceipt(LoadPrintreceiptVo vo, String staffId) {
		LoadPrintreceipt loadPrintreceipt = beanMapper.map(vo, LoadPrintreceipt.class);
		String receiptId = IdentifierUtils.getId().generate().toString();
		loadPrintreceipt.setReceiptId(receiptId);
		loadPrintreceipt.setCreatedBy(staffId);
		loadPrintreceipt.setUpdatedBy(staffId);
		loadPrintreceipt.setStatus(Global.STATUS_PASSED.toString());
		loadPrintreceipt.setIsDeleted(Global.ISDEL_NORMAL.toString());
		printReceiptDao.insert(loadPrintreceipt);
	}	

	@Override
	public void verifyElecReceipt(String loadId, String receiptId, String verifyResult, String staffId) {
		String actionCode = "18";// 电子回单上传

		if(VERIFY_PASSED.equals(verifyResult)) {
			//审核通过，流程结转，记日志，更新状态
			this.executeFlow(loadId, actionCode, null, staffId);
			//更新回单状态
			this.updateElecReceipt(receiptId, staffId, Global.STATUS_PASSED.toString());
			
			//释放司机车辆
			vadUsedService.releaseVandD(loadId, staffId);// 解锁司机车辆
		}else if(VERIFY_NOT_PASSED.equals(verifyResult)) {
			ArrivedValidate.valid_load_id(loadId);
			OrderLoadInfo orderLoadInfo = loadDao.get(loadId);
			//验证提货单是否存在
			ArrivedValidate.valid_load_exist(!ValidateUtils.isEmpty(orderLoadInfo));
			
			//审核不通过，记日志，更新状态
			FlowDef flowdef = flowsService.getFlowByActionCode(ZHFlow.LOAD_BILL, actionCode);
			loadHistoryService.saveLoadHistory(orderLoadInfo.getLoadId(), orderLoadInfo.getStatus(), null, flowdef,
					staffId);
			
			this.updateElecReceipt(receiptId, staffId, Global.STATUS_NOT_PASSED.toString());
		}

	}

	private void updateElecReceipt(String receiptId, String staffId, String status) {
		ArrivedValidate.valid_receipt_id(receiptId);
		
		Map<String, Object> params = Maps.newHashMap();
		params.put("receiptId", receiptId);
		params.put("source", DataSource.VLORRY.getCode());
		params.put("status", Global.STATUS_WAIT.toString());
		params.put("isDeleted", Global.ISDEL_NORMAL.toString());
		
		LoadElecreceipt elecreceipt = elecReceiptExtDao.getElecreceipt(params);
		
		ArrivedValidate.valid_receipt_exist(!ValidateUtils.isEmpty(elecreceipt));
		elecreceipt.setStatus(status);
		elecreceipt.setUpdatedBy(staffId);
		elecReceiptDao.updateSelective(elecreceipt);
		
	}

	@Override
	public void confirmPrintReceipt(String loadId, String receiptId, String staffId) {
		String actionCode = "19";// 纸质回单上传
		//提货单流程结转
		OrderLoadInfo orderLoadInfo = this.executeFlow(loadId, actionCode, null, staffId);
		
		//订单流程结转
		orderLinkStatusService.getPrintReceipt(orderLoadInfo.getOrderId(), staffId);

		this.updatePrintReceipt(loadId, receiptId, staffId);	

	}

	private void updatePrintReceipt(String loadId, String receiptId, String staffId) {
		ArrivedValidate.valid_receipt_id(receiptId);
		
		Map<String, Object> params = Maps.newHashMap();
		params.put("receiptId", receiptId);
		params.put("loadId", loadId);
		params.put("status", Global.STATUS_WAIT.toString());
		params.put("isDeleted", Global.ISDEL_NORMAL.toString());
		LoadPrintreceipt loadPrintreceipt = printReceiptExtDao.getPrintreceipt(params);
		
		ArrivedValidate.valid_receipt_exist(!ValidateUtils.isEmpty(loadPrintreceipt));
		
		loadPrintreceipt.setStatus(Global.STATUS_PASSED.toString());
		loadPrintreceipt.setUpdatedBy(staffId);
		printReceiptDao.updateSelective(loadPrintreceipt);
		
	}

	@Override
	public void close(String loadId, String staffId) {
		String actionCode = "20";//车辆到达关闭
		//提货单流程结转
		OrderLoadInfo orderLoadInfo = this.executeFlow(loadId, actionCode, null, staffId);
		
		//订单流程结转
		orderLinkStatusService.doClose(orderLoadInfo.getOrderId(), staffId);
	}

	@Override
	public Map<String, Object> getElecReceiptDetail(String loadId) {
		
		LoadElecreceipt loadElecreceipt = elecReceiptExtDao.getCurrentElecreceipt(loadId);
		
		Map<String,Object> elecreceiptDetail = Maps.newHashMap();
		
		elecreceiptDetail.put("loadElecreceipt", loadElecreceipt);
	
		List<Map<String, Object>> elecFeedbackList = loadFeedbackService.getElecFeedbackList(loadId);
		
		elecreceiptDetail.put("elecFeedbackList", elecFeedbackList);
		
		return elecreceiptDetail;
	}

}
